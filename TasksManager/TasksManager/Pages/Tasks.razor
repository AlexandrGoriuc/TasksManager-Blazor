@page "/tasks"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>My Tasks</h3>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Enter a task"
           @bind="newTask" />
    <button class="btn btn-primary" @onclick="AddTask">Add</button>
</div>

@if (tasks.Count == 0)
{
<p class="text-muted">No tasks</p> }
            else
            {
<ul class="list-group">
    @foreach (var task in tasks)
    {
<li class="list-group-item d-flex justify-content-between align-items-center">
    <div>
        <input type="checkbox" @onchange="(e) => OnCheckboxChanged(e, task)" class="form-check-input me-2" />
        <span style="@(task.IsDone ? "text-decoration: line-through;" : "")">
            @task.Title
        </span>
    </div>
    <button class="btn btn-sm btn-danger" @onclick="@(() => RemoveTask(task))">
        Delete
    </button>
</li>}
</ul>}

@code {
    string newTask = string.Empty;

    class TaskItem
    {
        public string Title { get; set; }
        public bool IsDone { get; set; }
    }

    List<TaskItem> tasks = new();

    protected override async Task OnInitializedAsync()
    {
        var savedTasks = await localStorage.GetItemAsync<List<TaskItem>>("tasks");
        if (savedTasks != null)
            tasks = savedTasks;
    }

    async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            tasks.Add(new TaskItem { Title = newTask, IsDone = false });
            newTask = string.Empty;
            await SaveTasks();
        }
    }

    async Task RemoveTask(TaskItem task)
    {
        tasks.Remove(task);
        await SaveTasks();
    }

    async void OnCheckboxChanged(ChangeEventArgs e, TaskItem task)
    {
        task.IsDone = (bool)e.Value;
        await SaveTasks();
    }

    async Task SaveTasks()
    {
        await localStorage.SetItemAsync("tasks", tasks);
    } }
