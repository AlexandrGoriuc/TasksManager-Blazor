@page "/tasks"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>My Tasks</h3>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Enter a task"
           @bind="newTask" />

    <select class="form-select" @bind="selectedCategoryId">
        @foreach (var category in categories)
        {
<option value="@category.Id">@category.Name</option>}
    </select>

    <button class="btn btn-primary" @onclick="AddTask">Add</button>
</div>

<div class="btn-group mb-3">
    <button class="btn btn-outline-secondary" @onclick="@(()=>ChangeFilter("all"))">
        All
    </button>
    <button class="btn btn-outline-secondary" @onclick="@(()=>ChangeFilter("active"))">
        Active
    </button>
    <button class="btn btn-outline-secondary" @onclick="@(()=>ChangeFilter("done"))">
        Done
    </button>
</div>

@if (tasks.Count == 0)
{
<p class="text-muted">No tasks</p> }
else
{
<ul class="list-group">
    @foreach (var task in FilteredTasks)
    {
<li class="list-group-item d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
        <input type="checkbox" @onchange="(e) => OnCheckboxChanged(e, task)" class="form-check-input me-2" />

        @if (editingTask == task)
        {
            <input type="text" class="form_control me-2" @bind="task.Title" @onblur="StopEditing" />
        }
        else
        {
            <span style="@(task.IsDone ? "text-decoration: line-through;" : "")"
                  @onclick="() => StartEditing(task)">
                @task.Title
            </span>
        }

        <small class="text-muted">[ @categories.FirstOrDefault(c => c.Id == task.CategoryId)?.Name ]</small>
    </div>
    <button class="btn btn-sm btn-danger" @onclick="@(() => RemoveTask(task))">
        Delete
    </button>
</li>
}
</ul>}

@code { string newTask = string.Empty;
    string currentFilter = "all";
    int selectedCategoryId = 1;

    TaskItem editingTask = null;

    class TaskItem
    {
        public string Title { get; set; }
        public bool IsDone { get; set; }
        public int CategoryId { get; set; }
    }

    class Category
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    List<TaskItem> tasks = new();
    List<Category> categories = new()
    {
        new Category { Id = 1, Name = "Work" },
        new Category { Id = 2, Name = "Study" },
        new Category { Id = 3, Name = "Personal" },
    };

    List<TaskItem> FilteredTasks =>
        currentFilter switch
        {
            "active" => tasks.Where(t => !t.IsDone).ToList(),
            "done" => tasks.Where(t => t.IsDone).ToList(),
            _ => tasks
        };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tasks = await localStorage.GetItemAsync<List<TaskItem>>("tasks") ?? new List<TaskItem>();
            StateHasChanged();
        }
    }

    async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask))
        {
            tasks.Add(new TaskItem { Title = newTask, IsDone = false, CategoryId = selectedCategoryId });
            newTask = string.Empty;
            await SaveTasks();
        }
    }

    async Task RemoveTask(TaskItem task)
    {
        tasks.Remove(task);
        await SaveTasks();
    }

    async void OnCheckboxChanged(ChangeEventArgs e, TaskItem task)
    {
        task.IsDone = (bool)e.Value;
        await SaveTasks();
    }

    async Task SaveTasks()
    {
        await localStorage.SetItemAsync("tasks", tasks);
    }

    void ChangeFilter(string filter)
    {
        currentFilter = filter;
    }

    void StartEditing(TaskItem task)
    {
        editingTask = task;
    }

    async void StopEditing()
    {
        editingTask = null;
        await SaveTasks();
    } }